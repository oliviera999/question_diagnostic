# Moodle Question Bank Diagnostic Tool - Cursor Rules

## üìã Contexte du Projet

Ce projet est un **plugin Moodle** (local plugin) pour le diagnostic et la gestion de la banque de questions.
- **Nom du plugin** : `local_question_diagnostic`
- **Version actuelle** : v1.2.1
- **Version Moodle CIBLE** : **Moodle 4.5** (compatible 4.5+), c'est tr√®s important
- **Langues** : Fran√ßais (FR) et Anglais (EN)

### ‚ö†Ô∏è CRITIQUE : V√©rification de la Structure BDD Moodle 4.5

**AVANT toute modification de code touchant la base de donn√©es, tu DOIS :**

1. **V√©rifier la structure exacte des tables** dans Moodle 4.5
2. **Consulter la documentation officielle** Moodle 4.5 et la documentation pour les d√©veloppeurs
3. **V√©rifier les noms de colonnes, types et contraintes**
4. **Ne JAMAIS supposer qu'une colonne existe sans v√©rification**

Les structures peuvent changer entre versions de Moodle. Une requ√™te qui fonctionne sur Moodle 4.3 peut √©chouer sur 4.5.

## üéØ Fonctionnalit√©s Principales

1. **Gestion des cat√©gories de questions**
   - D√©tection des cat√©gories vides, orphelines, doublons
   - Suppression individuelle et en masse
   - Fusion de cat√©gories
   - Export CSV

2. **V√©rification des liens cass√©s** (v1.1.0+)
   - D√©tection d'images et fichiers manquants
   - Support des plugins tiers (drag and drop, markers)
   - Interface de r√©paration

3. **Interface moderne**
   - Dashboard avec statistiques
   - Filtres et recherche en temps r√©el
   - Actions group√©es
   - Design responsive

## üèóÔ∏è Architecture Technique

### Structure des fichiers
```
local/question_diagnostic/
‚îú‚îÄ‚îÄ index.php                    # Interface principale + dashboard
‚îú‚îÄ‚îÄ categories.php               # Gestion des cat√©gories
‚îú‚îÄ‚îÄ broken_links.php            # V√©rification des liens
‚îú‚îÄ‚îÄ questions_cleanup.php       # Statistiques des questions
‚îú‚îÄ‚îÄ version.php                 # M√©tadonn√©es du plugin
‚îú‚îÄ‚îÄ lib.php                     # Fonctions auxiliaires
‚îú‚îÄ‚îÄ classes/
‚îÇ   ‚îú‚îÄ‚îÄ category_manager.php   # Logique m√©tier cat√©gories
‚îÇ   ‚îú‚îÄ‚îÄ question_analyzer.php  # Analyse des questions
‚îÇ   ‚îî‚îÄ‚îÄ question_link_checker.php # V√©rification liens
‚îú‚îÄ‚îÄ actions/
‚îÇ   ‚îú‚îÄ‚îÄ delete.php             # Suppression
‚îÇ   ‚îú‚îÄ‚îÄ merge.php              # Fusion
‚îÇ   ‚îú‚îÄ‚îÄ move.php               # D√©placement
‚îÇ   ‚îî‚îÄ‚îÄ export.php             # Export CSV
‚îú‚îÄ‚îÄ styles/main.css            # Design moderne
‚îú‚îÄ‚îÄ scripts/main.js            # JavaScript interactif
‚îî‚îÄ‚îÄ lang/
    ‚îú‚îÄ‚îÄ en/local_question_diagnostic.php
    ‚îî‚îÄ‚îÄ fr/local_question_diagnostic.php
```

### Technologies
- **Backend** : PHP 7.4+ (API Moodle)
- **Base de donn√©es** : MySQL/MariaDB (via API $DB de Moodle)
- **Frontend** : Vanilla JavaScript, CSS Grid/Flexbox
- **Standards** : Moodle Coding Guidelines

## üîë R√®gles de D√©veloppement Importantes

### 1. Standards Moodle
- **TOUJOURS** utiliser l'API Moodle (`$DB`, `$USER`, `$CFG`)
- **TOUJOURS** commencer les fichiers PHP par le header GPL standard
- **TOUJOURS** inclure `defined('MOODLE_INTERNAL') || die();` dans les libs
- **TOUJOURS** utiliser `require_login()` et `require_sesskey()` pour la s√©curit√©
- **TOUJOURS** utiliser `html_writer` pour g√©n√©rer du HTML (pas d'echo HTML direct)
- **TOUJOURS** utiliser `get_string()` pour les cha√Ænes traduisibles

### 2. S√©curit√©
- **V√©rification admin** : `is_siteadmin()` sur toutes les pages
- **Protection CSRF** : `require_sesskey()` sur toutes les actions
- **Validation** : `required_param()` et `optional_param()` avec types (PARAM_INT, PARAM_TEXT, etc.)
- **SQL s√©curis√©** : UNIQUEMENT l'API $DB (jamais de requ√™tes brutes)
- **√âchappement** : `format_string()`, `s()`, `format_text()` pour l'affichage
- **üö® CRITIQUE : Confirmation utilisateur** : TOUTE modification de la BDD DOIT avoir une confirmation explicite de l'admin

### 3. Conventions de Code
```php
// ‚úÖ BON - Style Moodle
$categories = $DB->get_records('question_categories');
if (!is_siteadmin()) {
    print_error('accessdenied', 'admin');
}

// ‚ùå MAUVAIS - Non conforme
$result = mysqli_query($conn, "SELECT * FROM mdl_question_categories");
if (!$_SESSION['is_admin']) {
    die('Access denied');
}
```

### 4. Cha√Ænes de Langue
- **Fichiers** : `lang/en/local_question_diagnostic.php` et `lang/fr/local_question_diagnostic.php`
- **Format** : `$string['cle'] = 'Valeur';`
- **Usage** : `get_string('cle', 'local_question_diagnostic')`
- **Placeholders** : `{$a}`, `{$a->name}`, etc.

### 5. CSS et JavaScript
- **Pr√©fixes** : Toutes les classes CSS doivent commencer par `qd-` (question diagnostic)
- **Pas de jQuery** : Utiliser Vanilla JavaScript (Moodle standard moderne)
- **RequireJS** : Pour les modules JS complexes (optionnel)
- **CSS Variables** : Utiliser pour les couleurs et th√®mes

### 6. Base de Donn√©es

#### Tables Moodle 4.5 utilis√©es

**ATTENTION** : Toujours v√©rifier la structure dans Moodle 4.5 avant modification !

**Tables principales :**
- `question_categories` : Cat√©gories de questions
- `question` : Questions
- `files` : Fichiers (pour v√©rification liens)
- `context` : Contextes Moodle
- `question_bank_entries` : Entr√©es de la banque de questions (Moodle 4.0+)
- `question_versions` : Versions des questions (Moodle 4.0+)

#### R√®gles STRICTES pour la BDD

1. **JAMAIS cr√©er de nouvelles tables** (plugin non-intrusif)
2. **TOUJOURS v√©rifier qu'une colonne existe** avant de l'utiliser dans une requ√™te
3. **Utiliser UNIQUEMENT l'API $DB** de Moodle (jamais de SQL brut)
4. **Consulter la doc Moodle 4.5** en cas de doute sur une structure
5. **Tester les requ√™tes** sur un environnement de dev Moodle 4.5

#### Ressources pour v√©rifier la structure BDD

- **Documentation officielle** : https://docs.moodle.org/dev/Database_Schema
- **Moodle 4.5 Release Notes** : https://docs.moodle.org/dev/Moodle_4.5_release_notes
- **Question Bank API** : https://moodledev.io/docs/apis/subsystems/questionbank
- **V√©rification directe** : Utiliser `$DB->get_columns()` pour inspecter une table

#### Exemple de v√©rification avant requ√™te

```php
// ‚úÖ BON - V√©rifier la structure avant utilisation
$columns = $DB->get_columns('question_categories');
if (isset($columns['newcolumn'])) {
    // La colonne existe, on peut l'utiliser
    $data = $DB->get_records('question_categories', ['newcolumn' => $value]);
} else {
    // Fallback ou erreur
    debugging('Column newcolumn does not exist in Moodle 4.5', DEBUG_DEVELOPER);
}

// ‚ùå MAUVAIS - Supposer qu'une colonne existe
$data = $DB->get_records('question_categories', ['newcolumn' => $value]);
```

### 7. Performance
- √âviter les boucles de requ√™tes (N+1 queries)
- Utiliser `get_records_sql()` avec JOINs si n√©cessaire
- Filtrage et tri JavaScript c√¥t√© client quand possible
- Debounce sur les recherches en temps r√©el (300ms)

### 8. Compatibilit√©

#### Version cible : Moodle 4.5
- **Version principale** : Moodle 4.5 (LTS)
- **Compatibilit√© descendante** : Moodle 4.3, 4.4
- **PHP** : 7.4+ (8.0+ recommand√© pour Moodle 4.5)
- **Base de donn√©es** : MySQL 8.0+, MariaDB 10.6+, PostgreSQL 13+
- **Navigateurs** : Versions r√©centes (Chrome, Firefox, Safari, Edge)

#### Changements importants dans Moodle 4.x

**Moodle 4.0+ a introduit une nouvelle architecture pour la banque de questions :**
- Nouvelle table `question_bank_entries` (entr√©es de questions)
- Nouvelle table `question_versions` (versioning des questions)
- Relations plus complexes entre questions et cat√©gories
- API Question Bank refactoris√©e

**Implications pour ce plugin :**
- Les requ√™tes sur la table `question` doivent tenir compte du versioning
- Les jointures peuvent n√©cessiter `question_bank_entries`
- Toujours v√©rifier la compatibilit√© avec le nouveau syst√®me

#### Avant toute modification

```php
// V√©rifier la version de Moodle
if ($CFG->version >= 2022041900) { // Moodle 4.0+
    // Utiliser la nouvelle structure avec question_bank_entries
} else {
    // Utiliser l'ancienne structure (pour compatibilit√© 3.x)
}
```

## üìù Exemples de Code Type

### Pattern de Confirmation Utilisateur (OBLIGATOIRE)

**‚ö†Ô∏è CONSULTER** : `USER_CONSENT_PATTERNS.md` pour les exemples complets

```php
// √âtape 1 : V√©rifier si confirmation est donn√©e
$confirm = optional_param('confirm', 0, PARAM_INT);

if (!$confirm) {
    // AFFICHER PAGE DE CONFIRMATION
    echo $OUTPUT->header();
    
    // Afficher les d√©tails de ce qui va √™tre modifi√©
    echo html_writer::tag('h2', get_string('confirm_action', 'local_question_diagnostic'));
    echo html_writer::tag('p', 'D√©tails de l\'action...');
    
    // ‚ö†Ô∏è AVERTISSEMENT si irr√©versible
    echo html_writer::start_tag('div', ['class' => 'alert alert-danger']);
    echo '‚ö†Ô∏è ' . get_string('action_irreversible', 'local_question_diagnostic');
    echo html_writer::end_tag('div');
    
    // BOUTONS : Confirmer + Annuler
    echo html_writer::link(
        new moodle_url('/action.php', ['id' => $id, 'confirm' => 1, 'sesskey' => sesskey()]),
        get_string('confirm', 'core'),
        ['class' => 'btn btn-danger']
    );
    echo html_writer::link(
        new moodle_url('/index.php'),
        get_string('cancel', 'core'),
        ['class' => 'btn btn-secondary']
    );
    
    echo $OUTPUT->footer();
    exit;
}

// √âtape 2 : Si confirm√©, ex√©cuter l'action
try {
    // Modifier la BDD
    $DB->delete_records('table', ['id' => $id]);
    
    redirect($url, get_string('success', 'local_question_diagnostic'),
            null, \core\output\notification::NOTIFY_SUCCESS);
} catch (Exception $e) {
    redirect($url, get_string('error', 'local_question_diagnostic'),
            null, \core\output\notification::NOTIFY_ERROR);
}
```

### Cr√©ation d'une nouvelle action
```php
<?php
// This file is part of Moodle - http://moodle.org/
// (header GPL complet...)

require_once(__DIR__ . '/../../../config.php');

require_login();
if (!is_siteadmin()) {
    print_error('accessdenied', 'admin');
}

$id = required_param('id', PARAM_INT);
require_sesskey();

// Logique m√©tier...

redirect(new moodle_url('/local/question_diagnostic/index.php'), 
         get_string('success', 'local_question_diagnostic'), 
         null, \core\output\notification::NOTIFY_SUCCESS);
```

### Ajout de cha√Ænes de langue
```php
// lang/fr/local_question_diagnostic.php
$string['nouvelle_cle'] = 'Nouvelle fonctionnalit√©';
$string['avec_placeholder'] = 'Il y a {$a} √©l√©ments';

// lang/en/local_question_diagnostic.php
$string['nouvelle_cle'] = 'New feature';
$string['avec_placeholder'] = 'There are {$a} items';
```

### Utilisation de l'API DB
```php
// ‚úÖ BON
$categories = $DB->get_records_select('question_categories', 
    'parent = :parent', 
    ['parent' => $parentid]
);

// ‚úÖ BON avec COUNT
$count = $DB->count_records('question', ['category' => $categoryid]);

// ‚ùå JAMAIS faire √ßa
$sql = "SELECT * FROM mdl_question_categories WHERE parent = $parentid";
```

## üö´ Ce qu'il NE faut PAS faire

1. ‚ùå Modifier les tables Moodle existantes
2. ‚ùå Cr√©er de nouvelles tables
3. ‚ùå Utiliser du code SQL brut
4. ‚ùå Oublier les v√©rifications de s√©curit√©
5. ‚ùå Hardcoder des cha√Ænes au lieu d'utiliser get_string()
6. ‚ùå Utiliser jQuery ou des frameworks externes
7. ‚ùå Ignorer le cache Moodle (toujours purger apr√®s modifs)
8. ‚ùå Cr√©er des fichiers de config personnalis√©s

## üé® Design System

### Couleurs principales
```css
--qd-primary: #0f6cbf;    /* Bleu Moodle */
--qd-success: #5cb85c;    /* Vert */
--qd-warning: #f0ad4e;    /* Orange */
--qd-danger: #d9534f;     /* Rouge */
--qd-neutral: #6c757d;    /* Gris */
```

### Classes CSS communes
- `.qd-card` : Cartes du dashboard
- `.qd-table` : Tableaux de donn√©es
- `.qd-badge-*` : Badges de statut
- `.qd-btn-*` : Boutons d'action
- `.qd-modal` : Fen√™tres modales

## üìö Documentation Importante

### Fichiers √† consulter
- `README.md` : Vue d'ensemble compl√®te
- `INSTALLATION.md` : Guide d'installation
- `PROJECT_OVERVIEW.md` : Architecture d√©taill√©e
- `CHANGELOG.md` : Historique des versions
- `FEATURE_*.md` : Documentation des fonctionnalit√©s
- `MOODLE_4.5_DATABASE_REFERENCE.md` : üö® Structure BDD Moodle 4.5 (CRITIQUE)
- `USER_CONSENT_PATTERNS.md` : üö® Patterns de confirmation utilisateur (CRITIQUE)

### Ressources Moodle
- [Moodle Developer Docs](https://moodledev.io/)
- [Coding Style](https://moodledev.io/general/development/policies/codingstyle)
- [DB API](https://moodledev.io/docs/apis/core/dml)
- [String API](https://moodledev.io/docs/apis/subsystems/string)

## üîç Debugging

```php
// Mode d√©bogage (dans config.php)
$CFG->debug = (E_ALL | E_STRICT);
$CFG->debugdisplay = 1;

// Logs
debugging('Message de debug', DEBUG_DEVELOPER);
mtrace('Message dans CLI');

// Dump de variables
var_dump($variable); // ou print_r()
```

## ‚úÖ Checklist avant Commit

- [ ] Code respecte le style Moodle
- [ ] S√©curit√© : sesskey, is_siteadmin(), validation params
- [ ] Cha√Ænes traduites (FR + EN)
- [ ] Pas de code SQL brut
- [ ] Pr√©fixes CSS `qd-`
- [ ] Commentaires en fran√ßais dans le code
- [ ] Header GPL sur nouveaux fichiers
- [ ] Version incr√©ment√©e dans version.php si n√©cessaire
- [ ] Cache Moodle purg√© apr√®s test
- [ ] Test√© sur Moodle 4.3+

## üí° Philosophie du Plugin

Ce plugin est :
- **Non-intrusif** : Ne modifie JAMAIS les donn√©es sans confirmation explicite de l'admin
- **S√©curis√©** : Admin-only, validations strictes, confirmations obligatoires
- **Performant** : Optimis√© pour de grandes bases
- **User-friendly** : Interface moderne et intuitive
- **Transparent** : L'utilisateur voit et valide AVANT toute modification
- **Maintenable** : Code clair, bien document√©
- **Compatible Moodle 4.5** : Respecte la nouvelle architecture de la banque de questions

### üö® R√àGLE FONDAMENTALE : Consentement Utilisateur

**AUCUNE modification de la base de donn√©es ne peut √™tre effectu√©e sans :**

1. ‚úÖ **Confirmation explicite** de l'administrateur
2. ‚úÖ **Page de confirmation** affichant clairement ce qui va √™tre modifi√©
3. ‚úÖ **Avertissement sur l'irr√©versibilit√©** (si applicable)
4. ‚úÖ **Option d'annulation** claire et accessible
5. ‚úÖ **Message de feedback** apr√®s l'action (succ√®s ou erreur)

## ‚ö†Ô∏è CHECKLIST AVANT TOUTE MODIFICATION

Quand tu d√©veloppes une nouvelle fonctionnalit√©, tu DOIS v√©rifier :

1. ‚úÖ **Structure BDD Moodle 4.5** : Les colonnes/tables existent-elles ?
2. ‚úÖ **Compatibilit√© version** : Fonctionne avec la nouvelle architecture Question Bank ?
3. ‚úÖ **S√©curit√©** : sesskey, is_siteadmin(), validation des param√®tres ?
4. ‚úÖ **üö® CONFIRMATION UTILISATEUR** : Page de confirmation AVANT toute modification BDD ?
5. ‚úÖ **Standards Moodle** : Utilise l'API Moodle (pas de SQL brut) ?
6. ‚úÖ **Performance** : √âvite les N+1 queries ?
7. ‚úÖ **Traduction** : Cha√Ænes en FR et EN ?
8. ‚úÖ **Tests** : Test√© sur environnement Moodle 4.5 ?

### üö® R√àGLES D'OR

1. **TOUJOURS rechercher la documentation Moodle 4.5** et v√©rifier la structure de la base de donn√©es AVANT de proposer une modification impliquant des requ√™tes SQL ou l'API $DB.

2. **TOUJOURS demander confirmation √† l'utilisateur** AVANT toute modification de la base de donn√©es (suppression, fusion, mise √† jour).

3. **JAMAIS modifier la BDD directement** depuis une action utilisateur sans page de confirmation interm√©diaire.

Ne jamais supposer. Toujours v√©rifier. Toujours confirmer.

---

**Version des r√®gles** : v1.0 (Oct 2025)
**Maintenu par** : √âquipe de d√©veloppement local_question_diagnostic

